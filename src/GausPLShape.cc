/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "../include/GausPLShape.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(GausPLShape) 

 GausPLShape::GausPLShape(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _x0,
                        RooAbsReal& _sigma,
                        RooAbsReal& _alpha,
                        RooAbsReal& _n) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   x0("x0","x0",this,_x0),
   sigma("sigma","sigma",this,_sigma),
   alpha("alpha","alpha",this,_alpha),
   n("n","n",this,_n)
 { 
 } 


 GausPLShape::GausPLShape(const GausPLShape& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   x0("x0",this,other.x0),
   sigma("sigma",this,other.sigma),
   alpha("alpha",this,other.alpha),
   n("n",this,other.n)
 { 
 } 



 Double_t GausPLShape::evaluate() const 
 { 
   double y((x - x0) / sigma);

   if(y > alpha){
     double f(n / alpha);
     return TMath::Exp(-alpha * alpha / 2.) * TMath::Power(f, n) * TMath::Power(y - alpha + f, -n);
   }
   else
     return TMath::Exp(-y * y / 2.);
 } 



 Int_t GausPLShape::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
   if (n > 1 && matchArgs(allVars,analVars,x)) return 1 ; 
   return 0 ; 
 } 



 Double_t GausPLShape::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
   if(code == 1){
     assert(n > 1);
     double sqrt2(TMath::Sqrt(2.));
     return sigma * (TMath::Sqrt(TMath::Pi()) / sqrt2 * TMath::Erfc(-alpha / sqrt2) + TMath::Exp(-alpha * alpha / 2.) * n / alpha / (n - 1));
   }

   return 0 ; 
 } 



