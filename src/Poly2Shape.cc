/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "../include/Poly2Shape.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(Poly2Shape) 

 Poly2Shape::Poly2Shape(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _xbar,
                        RooAbsReal& _sigma) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   xbar("xbar","xbar",this,_xbar),
   sigma("sigma","sigma",this,_sigma)
 { 
 } 


 Poly2Shape::Poly2Shape(const Poly2Shape& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   xbar("xbar",this,other.xbar),
   sigma("sigma",this,other.sigma)
 { 
 } 



 Double_t Poly2Shape::evaluate() const 
 { 
   double y((x - xbar) / sigma);
   double sqrt2(TMath::Sqrt(2));
   if(y < -sqrt2 || y > sqrt2) return 0.;
   return -y * y / 2. + 1.;
 } 



 Int_t Poly2Shape::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const  
 { 
   if (matchArgs(allVars,analVars,x)) return 1 ; 
   return 0 ; 
 } 



 Double_t Poly2Shape::analyticalIntegral(Int_t code, const char* rangeName) const  
 { 
   assert(code==1) ; 
   return sigma * 8. * TMath::Sqrt(2.) / 3.;
 } 



