/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef POLY2PLSHAPE
#define POLY2PLSHAPE

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
 
class Poly2PLShape : public RooAbsPdf {
public:
  Poly2PLShape() {} ; 
  Poly2PLShape(const char *name, const char *title,
	      RooAbsReal& _x,
	      RooAbsReal& _xbar,
	      RooAbsReal& _sigma,
              RooAbsReal& _alpha,
              RooAbsReal& _n);
  Poly2PLShape(const Poly2PLShape& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new Poly2PLShape(*this,newname); }
  inline virtual ~Poly2PLShape() { }

  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;

protected:

  RooRealProxy x ;
  RooRealProxy xbar ;
  RooRealProxy sigma ;
  RooRealProxy alpha ;
  RooRealProxy n ;
  
  Double_t evaluate() const ;

private:

  ClassDef(Poly2PLShape,1) // Generic background with a second order polynomial turn on and a power law tail
};
 
#endif
